%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 172.000000 56.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.9.1 (Build 13B3116) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 172 56
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 172 56
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.307017 0.481453 0.44293699 sc
q
0 0 172 56 rc
62.379826 32.532616 m
69.706253 32.532616 l
69.706253 31.846512 l
68.710014 31.757849 67.957512 31.647303 67.869408 31.248882 c
67.780746 30.828579 67.780746 30.496187 67.780746 29.920631 c
67.780746 25.848335 l
66.474564 25.361254 64.349846 24.830029 62.180614 24.830029 c
57.289219 24.830029 53.548191 27.28676 53.548191 32.931221 c
53.548191 36.339859 56.027557 40.855095 62.490372 40.855095 c
64.548874 40.855095 65.567368 40.456486 66.651703 40.102398 c
67.271408 39.903378 67.514755 39.593433 67.514755 39.239155 c
67.514755 36.384003 l
66.916939 36.384003 l
66.54097 38.088043 65.4123 40.124657 62.401711 40.124657 c
58.595215 40.124657 57.001347 36.981445 56.979275 33.108173 c
56.979275 29.057575 58.860451 25.56065 62.025734 25.56065 c
64.150452 25.56065 64.881073 26.269014 64.881073 28.504465 c
64.881073 29.920631 l
64.881073 30.496187 64.881073 30.828579 64.792412 31.248882 c
64.703751 31.647303 63.929169 31.757849 62.379826 31.846512 c
h
62.379826 32.532616 m
f
71.033684 25.781969 m
72.029915 25.848186 72.782234 25.95892 72.870903 26.357527 c
72.959373 26.777832 72.959373 27.109848 72.959373 27.707476 c
72.959373 37.977905 l
72.959373 38.575348 72.959373 38.90699 72.870903 39.327671 c
72.782234 39.726276 72.029915 39.836823 71.033684 39.903412 c
71.033684 40.589333 l
78.005646 40.589333 l
78.005646 39.903412 l
77.009598 39.836823 76.257278 39.726276 76.1688 39.327671 c
76.080139 38.90699 76.080139 38.575348 76.080139 37.977905 c
76.080139 27.552597 l
76.080139 26.04777 76.899239 25.914776 78.69194 25.914776 c
81.525208 25.914776 81.945694 27.132107 82.853081 29.101944 c
83.472969 29.101944 l
82.808754 25.095491 l
71.033684 25.095491 l
h
71.033684 25.781969 m
f
84.955673 25.781969 m
85.930023 25.848186 86.704414 25.95892 86.792892 26.357527 c
86.881554 26.777832 86.881554 27.109848 86.881554 27.707476 c
86.881554 37.977905 l
86.881554 38.575348 86.881554 38.90699 86.792892 39.327671 c
86.704414 39.726276 85.930023 39.836823 84.955673 39.903412 c
84.955673 40.589333 l
95.82373 40.589333 l
95.82373 37.025627 l
95.225914 37.025627 l
94.893898 38.59742 94.362671 39.770607 92.813515 39.770607 c
90.002129 39.770607 l
90.002129 33.572845 l
91.839348 33.572845 l
93.234001 33.572845 93.831444 34.436089 93.831444 35.698124 c
94.42926 35.698124 l
94.42926 30.540556 l
93.831444 30.540556 l
93.787117 31.757887 93.322479 32.754124 91.839348 32.754124 c
90.002129 32.754124 l
90.002129 27.729549 l
90.002129 26.04777 90.821045 25.914776 92.636375 25.914776 c
95.447006 25.914776 95.868065 27.132107 96.797333 29.101944 c
97.394966 29.101944 l
96.730553 25.095491 l
84.955673 25.095491 l
h
84.955673 25.781969 m
f
111.71554 25.095491 m
109.05904 28.504503 105.31857 33.218945 102.02104 37.202953 c
101.97671 37.202953 l
101.97671 28.349438 l
101.97671 27.796139 102.02104 27.30887 102.08688 26.888565 c
102.19762 26.158131 102.79525 25.848186 104.49966 25.781969 c
104.49966 25.095491 l
98.899719 25.095491 l
98.899719 25.781969 l
100.09516 25.848186 100.6926 26.158131 100.78127 26.888565 c
100.84767 27.30887 100.89144 27.796139 100.89144 28.349438 c
100.89144 38.132412 l
100.2723 39.150719 99.408867 39.903412 98.080429 39.903412 c
98.080429 40.589333 l
103.23781 40.589333 l
105.96053 37.070145 109.39143 32.820339 112.31261 29.212679 c
112.35712 29.212679 l
112.35712 37.335758 l
112.35712 37.889057 112.26846 38.375763 112.22414 38.796631 c
112.15773 39.526691 111.58255 39.836823 109.85587 39.903412 c
109.85587 40.589333 l
115.43356 40.589333 l
115.43356 39.903412 l
114.26019 39.836823 113.6635 39.526691 113.55257 38.796631 c
113.48617 38.375763 113.44184 37.889057 113.44184 37.335758 c
113.44184 25.095491 l
h
111.71554 25.095491 m
f
131.2814 29.234732 m
130.6617 26.357508 l
130.61717 25.870426 130.21838 25.78195 129.5768 25.560482 c
128.80222 25.294868 127.18665 24.830046 125.30529 24.830046 c
120.39127 24.830046 116.65061 27.286779 116.65061 32.93124 c
116.65061 36.339691 119.1296 40.85511 125.59241 40.85511 c
127.65147 40.85511 128.66922 40.456505 129.75394 40.102417 c
130.37344 39.903393 130.61717 39.593449 130.61717 39.238987 c
130.61717 36.384022 l
130.01973 36.384022 l
129.66527 38.088062 128.51434 40.124676 125.52601 40.124676 c
121.96306 40.124676 120.10395 37.092388 120.0817 33.108192 c
120.05962 28.836126 121.7414 25.560482 125.68108 25.560482 c
128.22665 25.560482 129.79826 27.308851 130.68376 29.234732 c
h
131.2814 29.234732 m
f
145.45438 32.621204 m
145.45438 37.800468 142.97575 40.058365 140.6075 40.058365 c
137.7299 40.058365 136.2247 37.402424 136.2247 33.661583 c
136.2247 28.437986 138.48241 25.626791 140.98366 25.626791 c
144.03802 25.626791 145.45438 28.504391 145.45438 32.621204 c
132.79379 32.731937 m
132.79379 37.224911 136.44635 40.855206 141.20494 40.855206 c
145.76451 40.855206 148.88527 37.136623 148.88527 33.241093 c
148.88527 28.128042 144.83467 24.830139 140.4081 24.830139 c
136.82214 24.830139 132.79379 27.552486 132.79379 32.731937 c
f
150.18401 25.781969 m
151.15836 25.848186 151.93256 25.95892 152.02104 26.357527 c
152.1097 26.777832 152.1097 27.109848 152.1097 27.707476 c
152.1097 37.977905 l
152.1097 38.575348 152.1097 38.90699 152.02104 39.327671 c
151.93256 39.726276 151.15836 39.836823 150.18401 39.903412 c
150.18401 40.589333 l
161.05225 40.589333 l
161.05225 37.025627 l
160.45444 37.025627 l
160.12224 38.59742 159.59082 39.770607 158.04184 39.770607 c
155.23083 39.770607 l
155.23083 33.572845 l
157.06805 33.572845 l
158.46234 33.572845 159.05959 34.436089 159.05959 35.698124 c
159.65741 35.698124 l
159.65741 30.540556 l
159.05959 30.540556 l
159.01526 31.757887 158.55081 32.754124 157.06805 32.754124 c
155.23083 32.754124 l
155.23083 27.729549 l
155.23083 26.04777 156.04956 25.914776 157.8647 25.914776 c
160.67552 25.914776 161.09659 27.132107 162.02585 29.101944 c
162.62347 29.101944 l
161.95926 25.095491 l
150.18401 25.095491 l
h
150.18401 25.781969 m
f
0.109562 0.18781 0.37406999 sc
75.458252 19.596292 m
75.240334 20.359276 74.791977 21.182863 73.835022 21.182863 c
73.290321 21.182863 72.660522 20.843925 72.660522 19.947388 c
72.660522 19.09967 73.471954 18.675627 74.791977 17.670225 c
76.027634 16.7374 76.41539 16.059338 76.41539 15.138671 c
76.41539 13.648433 74.937683 12.849537 73.205215 12.849537 c
72.200188 12.849537 71.533722 12.994688 70.90374 13.236732 c
70.855476 13.261236 70.819191 13.309496 70.819191 13.406388 c
70.819191 15.247535 l
71.145966 15.247535 l
71.351913 14.145429 72.042694 13.285366 73.07222 13.285366 c
73.85952 13.285366 74.561897 13.927326 74.561897 14.811706 c
74.561897 15.610976 74.210617 16.156231 72.514999 17.258337 c
71.6063 17.83988 70.855476 18.505783 70.855476 19.571976 c
70.855476 20.771162 72.006218 21.618879 73.677711 21.618879 c
74.464821 21.618879 75.058525 21.594936 75.664383 21.425468 c
75.749115 21.388805 75.7854 21.316231 75.7854 21.255625 c
75.7854 19.596292 l
h
75.458252 19.596292 m
f
85.790649 17.112942 m
85.790649 19.947332 84.433777 21.182993 83.137703 21.182993 c
81.562912 21.182993 80.739517 19.729231 80.739517 17.682327 c
80.739517 14.823995 81.975174 13.285498 83.343834 13.285498 c
85.015137 13.285498 85.790649 14.860096 85.790649 17.112942 c
78.86171 17.173361 m
78.86171 19.632524 80.860535 21.619011 83.464851 21.619011 c
85.960304 21.619011 87.668083 19.584265 87.668083 17.452253 c
87.668083 14.653965 85.45134 12.849668 83.028839 12.849668 c
81.066483 12.849668 78.86171 14.339158 78.86171 17.173361 c
f
89.614433 21.473745 m
95.574074 21.473745 l
95.574074 19.523548 l
95.247292 19.523548 l
95.065483 20.383423 94.762459 21.025572 93.914551 21.025572 c
92.376427 21.025572 l
92.376427 17.391911 l
93.526985 17.391911 l
94.290154 17.391911 94.617302 17.864029 94.629463 18.554436 c
94.956619 18.554436 l
94.956619 15.732204 l
94.629463 15.732204 l
94.592804 16.398294 94.3386 16.943174 93.526985 16.943174 c
92.376427 16.943174 l
92.376427 14.423966 l
92.376427 14.097001 92.376427 13.915374 92.424873 13.685114 c
92.47332 13.467011 92.885025 13.406407 93.430275 13.370119 c
93.430275 12.99452 l
89.614433 12.99452 l
89.614433 13.370119 l
90.159874 13.406407 90.571571 13.467011 90.619827 13.685114 c
90.668274 13.915374 90.668274 14.097001 90.668274 14.423966 c
90.668274 20.0443 l
90.668274 20.371265 90.668274 20.55308 90.619827 20.783339 c
90.571571 21.001255 90.159874 21.061859 89.614433 21.09796 c
h
89.614433 21.473745 m
f
101.90885 14.423892 m
101.90885 14.097114 101.90885 13.915299 101.9573 13.685226 c
102.0063 13.466937 102.418 13.406332 102.9627 13.370232 c
102.9627 12.994633 l
99.147224 12.994633 l
99.147224 13.370232 l
99.691917 13.406332 100.10418 13.466937 100.15281 13.685226 c
100.20107 13.915299 100.20107 14.097114 100.20107 14.423892 c
100.20107 21.025496 l
99.183701 21.025496 l
98.154167 21.025496 97.887619 20.383348 97.439445 19.620367 c
97.112289 19.620367 l
97.439445 21.473671 l
104.6832 21.473671 l
105.00997 19.620367 l
104.6832 19.620367 l
104.23464 20.383348 103.98007 21.025496 102.93857 21.025496 c
101.90885 21.025496 l
h
101.90885 14.423892 m
f
109.91425 21.097998 m
109.1509 21.073868 108.87275 20.843981 109.1148 20.02002 c
110.47166 15.00536 l
110.4958 15.00536 l
112.68767 21.364733 l
113.63284 21.364733 l
115.87371 14.993201 l
115.89784 14.993201 l
116.38249 16.519541 116.86714 18.263794 117.35161 19.99589 c
117.55736 20.771219 117.32748 21.03758 116.34639 21.097998 c
116.34639 21.473783 l
119.1443 21.473783 l
119.1443 21.097998 l
118.78105 21.110342 118.29621 20.880083 118.09045 20.213806 c
115.93432 12.994557 l
114.68687 12.994557 l
112.61509 19.196621 l
112.59115 19.196621 l
110.47166 12.994557 l
109.3084 12.994557 l
107.52766 19.47514 l
107.1891 20.662355 106.78918 21.061897 106.14704 21.097998 c
106.14704 21.461626 l
109.91425 21.461626 l
h
109.91425 21.097998 m
f
124.05637 16.240871 m
122.85719 19.778013 l
122.83305 19.778013 l
121.52482 16.240871 l
h
121.3069 15.695991 m
120.82206 14.254386 l
120.65297 13.745606 120.82206 13.370194 121.37929 13.370194 c
121.37929 12.994595 l
119.01758 12.994595 l
119.01758 13.370194 l
119.3683 13.370194 119.8045 13.575764 120.07105 14.109234 c
120.50744 15.017555 121.98534 18.954426 123.00252 21.618973 c
123.79001 21.618973 l
124.5167 19.620329 125.98206 15.635573 126.43061 14.472301 c
126.67265 13.83034 127.03591 13.370194 127.55685 13.370194 c
127.55685 12.994595 l
124.17739 12.994595 l
124.17739 13.370194 l
124.84367 13.370194 124.95235 13.745606 124.75874 14.278516 c
124.26231 15.695991 l
h
121.3069 15.695991 m
f
131.81352 17.198051 m
132.66161 17.198051 l
133.72743 17.198051 134.0905 18.105999 134.0905 19.244766 c
134.0905 20.553192 133.49754 21.001179 132.66161 21.001179 c
131.81352 21.001179 l
h
129.05151 21.473671 m
133.31592 21.473671 l
134.69617 21.473671 135.9077 20.807768 135.9077 19.329689 c
135.9077 18.227581 135.16904 17.319073 134.11537 16.967417 c
135.35066 15.066039 l
135.9077 14.218136 136.52516 13.430462 136.86484 13.212734 c
136.86484 12.994633 l
135.12041 12.994633 l
134.40567 12.994633 133.66664 15.053881 132.71005 16.725372 c
131.81352 16.725372 l
131.81352 14.423892 l
131.81352 14.097114 131.81352 13.915299 131.86234 13.685226 c
131.9106 13.466937 132.33427 13.406332 132.86755 13.370232 c
132.86755 12.994633 l
129.05151 12.994633 l
129.05151 13.370232 l
129.58481 13.406332 130.00922 13.466937 130.0573 13.685226 c
130.10574 13.915299 130.10574 14.097114 130.10574 14.423892 c
130.10574 20.044413 l
130.10574 20.371378 130.10574 20.553192 130.0573 20.783264 c
130.00922 21.001179 129.58481 21.061785 129.05151 21.098072 c
h
129.05151 21.473671 m
f
138.5448 13.370175 m
139.07809 13.406277 139.50175 13.467068 139.5502 13.68517 c
139.59865 13.91543 139.59865 14.097057 139.59865 14.423836 c
139.59865 20.044355 l
139.59865 20.371321 139.59865 20.553135 139.5502 20.783209 c
139.50175 21.001123 139.07809 21.061914 138.5448 21.098017 c
138.5448 21.473803 l
144.49229 21.473803 l
144.49229 19.523605 l
144.16515 19.523605 l
143.98351 20.38348 143.69264 21.02544 142.84492 21.02544 c
141.30643 21.02544 l
141.30643 17.633825 l
142.31203 17.633825 l
143.07538 17.633825 143.40234 18.106129 143.40234 18.796535 c
143.72894 18.796535 l
143.72894 15.974492 l
143.40234 15.974492 l
143.37784 16.640581 143.12364 17.185837 142.31203 17.185837 c
141.30643 17.185837 l
141.30643 14.436181 l
141.30643 13.515514 141.75499 13.442939 142.74767 13.442939 c
144.28635 13.442939 144.5166 14.109216 145.02521 15.186818 c
145.35217 15.186818 l
144.98891 12.994576 l
138.5448 12.994576 l
h
138.5448 13.370175 m
f
1 0.998303 0.99514902 sc
42.016518 27.876247 m
42.016518 21.260427 36.653755 15.897291 30.038496 15.897291 c
23.423237 15.897291 18.060472 21.260427 18.060472 27.876247 c
18.060472 34.492069 23.423237 39.855206 30.038496 39.855206 c
36.653755 39.855206 42.016518 34.492069 42.016518 27.876247 c
h
42.016518 27.876247 m
f
0.57415599 0.65513098 0.63056803 sc
36.217381 27.873611 m
36.217381 25.058113 33.933861 22.774965 31.118176 22.774965 c
28.302116 22.774965 26.019154 25.058113 26.019154 27.873611 c
26.019154 30.690042 28.302116 32.97282 31.118176 32.97282 c
33.933861 32.97282 36.217381 30.690042 36.217381 27.873611 c
h
36.217381 27.873611 m
f
41.255348 36.744839 m
41.255348 33.929344 38.972385 31.646194 36.156517 31.646194 c
33.339897 31.646194 31.057121 33.929344 31.057121 36.744839 c
31.057121 39.561272 33.339897 41.844048 36.156517 41.844048 c
38.972385 41.844048 41.255348 39.561272 41.255348 36.744839 c
h
41.255348 36.744839 m
f
41.266312 19.007114 m
41.266312 16.190681 38.983723 13.907906 36.166916 13.907906 c
33.35067 13.907906 31.067896 16.190681 31.067896 19.007114 c
31.067896 21.823172 33.35067 24.106321 36.166916 24.106321 c
38.983723 24.106321 41.266312 21.823172 41.266312 19.007114 c
h
41.266312 19.007114 m
f
0.109562 0.18781 0.37406999 sc
19.67684 33.885929 m
18.729799 34.387039 17.650326 34.67173 16.50445 34.67173 c
12.749954 34.67173 9.7053185 31.628031 9.7053185 27.872974 c
9.7053185 24.118855 12.749954 21.074219 16.50445 21.074219 c
17.651447 21.074219 18.731483 21.359846 19.679459 21.861704 c
18.650677 23.629715 18.058659 25.682978 18.058659 27.876341 c
18.058659 30.067461 18.649742 32.119041 19.67684 33.885929 c
h
19.67684 33.885929 m
f
40.395718 21.861668 m
41.34388 21.359808 42.423729 21.074181 43.571476 21.074181 c
47.325596 21.074181 50.369858 24.118816 50.369858 27.873125 c
50.369858 31.627995 47.325596 34.671696 43.571476 34.671696 c
42.425037 34.671696 41.345753 34.387001 40.398148 33.885891 c
41.425621 32.119003 42.016518 30.067238 42.016518 27.876305 c
42.016518 25.683126 41.4245 23.629864 40.395718 21.861668 c
h
40.395718 21.861668 m
f
30.016554 39.854755 m
29.934626 43.538734 26.925343 46.499943 23.222286 46.499943 c
19.467043 46.499943 16.423344 43.456059 16.423344 39.701 c
16.423344 37.243706 17.728027 35.090183 19.682528 33.896423 c
21.755056 37.453205 25.604761 39.847088 30.016554 39.854755 c
h
30.016554 39.854755 m
f
40.386757 33.906204 m
42.332279 35.102211 43.630043 37.249935 43.630043 39.700871 c
43.630043 43.456112 40.586716 46.5 36.832409 46.5 c
33.128601 46.5 30.118385 43.539165 30.03627 39.855186 c
30.037392 39.855186 l
34.453861 39.855186 38.309364 37.463547 40.386757 33.906204 c
h
40.386757 33.906204 m
f
19.682508 21.856356 m
17.728008 20.66222 16.423325 18.508884 16.423325 16.050653 c
16.423325 12.295785 19.466463 9.2522717 23.221895 9.2522717 c
26.925512 9.2522717 29.935356 12.213108 30.016911 15.897459 c
25.604929 15.904942 21.75485 18.298824 19.682508 21.856356 c
h
19.682508 21.856356 m
f
30.037373 15.896842 m
30.036064 15.896842 l
30.118366 12.213052 33.127834 9.2524033 36.831078 9.2524033 c
40.585949 9.2524033 43.630024 12.295729 43.630024 16.050598 c
43.630024 18.501907 42.33226 20.64963 40.386364 21.84601 c
38.309345 18.288668 34.453468 15.896842 30.037373 15.896842 c
h
30.037373 15.896842 m
f
ep
end
%%Trailer
%%EOF
